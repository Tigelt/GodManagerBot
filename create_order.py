import requests
from requestsMC import change_state
from requestsMC.change_state import change_order_state, get_order_states
from requestsMC.create_demand_for_order import create_demand_for_order
from requestsMC.create_payment import create_payment_for_order
from requestsMC.find_agent_by_name import *
from requestsMC.get_positions import get_positions
from configMC import order_data, PROJECT_HREFS, organization_href, headers, dostavlenState_href
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def create_order(data, update, context):

    # –£–∫–∞–∑—ã–≤–∞—é –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    agent_href = find_agent_by_name(data['username'])
    if not agent_href:
        await update.message.reply_text(f"–ù–µ –Ω–∞—à–µ–ª –∫–ª–∏–µ–Ω—Ç–∞ {data['username']}")
    order_data["agent"] = {
        "meta": {
            "href": agent_href,
            "type": "counterparty",
            "mediaType": "application/json"
        }
    }

    # –£–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ–µ–∫—Ç
    href = PROJECT_HREFS.get(data['payment'].lower(), None)
    order_data["project"] = {
       "meta": {
           "href": href,
           "type": "project",
           "mediaType": "application/json"
       }
    }
    
    # –î–æ–±–∞–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ—Å—Ç–∞–≤–∫—É
    order_data["description"] = str(data['delivery'])

    order_data["state"] = {
        "meta": {
            "href": "https://api.moysklad.ru/api/remap/1.2/entity/customerorder/metadata/states/636b5ae8-39e0-11f0-0a80-065e00264b95",
            "type": "state",
            "mediaType": "application/json"
        }
    }   

    # –î–æ–±–∞–≤–ª—è—é –ø–æ–∑–∏—Ü–∏–∏
    order_data["positions"] = get_positions(data['items'], update)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    url = "https://api.moysklad.ru/api/remap/1.2/entity/customerorder"
    json.dumps(order_data, ensure_ascii=False, indent=4)
    response = requests.post(url, json=order_data, headers=headers)
    #print(response.text)
    #await get_order_states()
    
    if response.status_code == 200:
        await update.message.reply_text(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –ú–°")
        print("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –ú–°")
        order= response.json()
        #print(order)
        await check_order(order.get("meta", {}).get("href"), update, data)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º response
        context.user_data["last_order"] = response.json()

        # –ü–æ—Ç–æ–º, –≤ callback handler'–µ:
        order = context.user_data.get("last_order")
        return response
    else:
        await update.message.reply_text(f"–ù–µ —Å–æ–∑–¥–∞–ª—Å—è –∑–∞–∫–∞–∑")
        raise ValueError(f"–ù–µ —Å–æ–∑–¥–∞–ª—Å—è –∑–∞–∫–∞–∑")
        return response

async def check_order(href, update, data):
    positions_url = href + "/positions"
    order_sum = 0

    positions_response = requests.get(positions_url, headers=headers)
    positions = positions_response.json().get("rows", [])

    result_lines = []

    for pos in positions:
        quantity = pos.get("quantity", 0)
        price = pos.get("price", 0) / 100  # —Ü–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        total = quantity * price
        order_sum += total

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ —Ç–æ–≤–∞—Ä
        product_href = pos.get("assortment", {}).get("meta", {}).get("href")
        product_response = requests.get(product_href, headers=headers)
        product_data = product_response.json()
        name = product_data.get("name", "‚ùì–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        line = f"‚Ä¢ {name} ‚Äî x{quantity} {total:.0f} VND"
        result_lines.append(line)

    full_message = f"üßæ {order_sum}\n" + "\n".join(result_lines)
    #print(full_message)

    # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
    await ask_order_confirmation(update, full_message, data)

    return full_message



async def ask_order_confirmation(update, product_summary, data):
    overheads = 0
    if abs((data['total'] - data['summa'] - data['delivery'])) == data['delivery']:
        overheads = data['delivery']
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_order:{overheads}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_order"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üßæ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?\n\n–ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {overheads}\n\n{product_summary}",
        reply_markup=reply_markup
    )
   
   
   
    
async def handle_order_callback(update, context):
    query = update.callback_query
    await query.answer()
    data = query.data.split(":")
    action = data[0]  # confirm_order –∏–ª–∏ cancel_order
    overheads = int(data[1]) if len(data) > 1 else 0

    if action == "confirm_order":
        await query.edit_message_text("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°–æ–∑–¥–∞—é –ø–ª–∞—Ç—ë–∂...")

        # –î–æ—Å—Ç–∞—ë–º –∑–∞–∫–∞–∑, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ
        order = context.user_data.get("last_order")
        if not order:
            await query.edit_message_text("‚ùó –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.")
            return

        href = order.get("meta", {}).get("href")
        if not href:
            await query.edit_message_text("‚ùó –û—à–∏–±–∫–∞: —É –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏.")
            return

        # –¢—É—Ç –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        
        await create_payment_for_order(href, update, context)
        demand = await create_demand_for_order(href, update, context, overheads)
        if demand.status_code == 200:
            await change_order_state(href, dostavlenState_href)

    elif query.data == "cancel_order":
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")

