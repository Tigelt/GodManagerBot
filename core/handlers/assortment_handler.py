"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
"""

import asyncio
import json
import re
import logging
import aiohttp
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from services.telegram_client import TelegramClientService
from services.moy_sklad import MoySkladAPI

logger = logging.getLogger(__name__)

class AssortmentHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞"""
    
    def __init__(self, telegram_client: TelegramClientService, moy_sklad: MoySkladAPI, config: dict):
        self.telegram_client = telegram_client
        self.moy_sklad = moy_sklad
        self.config = config
        self.auto_publish_running = False
    
    async def handle_assortment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /assortment"""
        try:
            await update.message.reply_text("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
            final_assortment = await self._prepare_assortment()
            if not final_assortment:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
                return
            
            await update.message.reply_text("üîÑ –ü—É–±–ª–∏–∫—É—é –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ...")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
            await self._publish_assortment(final_assortment, update, context)
            
            await update.message.reply_text("‚úÖ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /assortment: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞")
    
    async def handle_update_assortment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /updateassortment"""
        try:
            await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç...")
            
            # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ú–æ–π –°–∫–ª–∞–¥
            await self._prepare_assortment()
            
            # –ü–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä—É–º–µ
            await self._update_assortment(update, context)
            
            await update.message.reply_text("‚úÖ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /updateassortment: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞")
    
    async def handle_base_flavor_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /baseflavor - –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞"""
        try:
            print("üîÑ –û–±–Ω–æ–≤–ª—è—é –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤...")
            await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
            entity = await self.telegram_client.get_entity(self.config['flavor_channel'])
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–µ—Ç–∫–µ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
            messages = []
            async for message in self.telegram_client.iter_messages(
                entity, 
                reply_to=self.config['flavor_thread_id'], 
                limit=None
            ):
                if message.text:  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
                    messages.append(message)
            
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –≤–∫—É—Å–æ–≤
            flavor_descriptions = {}
            
            # –ë—Ä–µ–Ω–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            actual_brands = self.config['actual_brands']
            
            # –ò–¥–µ–º –ø–æ –º–∞—Å—Å–∏–≤—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
            for brand in actual_brands:
                
                
                # –°–æ–∑–¥–∞–µ–º —Ö–µ—à—Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ 's')
                hashtag = f"#{brand.lower().replace(' ', '').replace(chr(39), '')}"
                
                # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º —Ö–µ—à—Ç–µ–≥–æ–º
                brand_messages = []
                for message in messages:
                    if message.text and hashtag in message.text.lower():
                        brand_messages.append(message)
                
                print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(brand_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {brand}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if brand_messages:
                    flavor_descriptions[brand] = {}
                    
                    for message in brand_messages:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫—É—Å–∞ –∏ —É–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
                        lines = message.text.strip().split('\n')
                        if lines:
                            flavor_name = lines[0].strip().replace('**', '')
                            
                            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            message_link = f"https://t.me/{entity.username}/{message.id}"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                            flavor_descriptions[brand][flavor_name] = message_link
                            logger.info(f"  ‚úÖ {flavor_name} ‚Üí {message_link}")
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—Ä–µ–Ω–¥–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å–µ–∫—Ü–∏—é
                if brand not in flavor_descriptions:
                    flavor_descriptions[brand] = {}
                    print(f"  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {brand}")
                    
            # –£–±–∏—Ä–∞–µ–º —Å–µ–∫—Ü–∏—é "–û—Å—Ç–∞–ª—å–Ω—ã–µ" - –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–∞–π–ª
            output_file = self.config['flavor_descriptions_file']
            with open(output_file, "w", encoding="utf-8") as f:
                json.dump(flavor_descriptions, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
            total_flavors = sum(len(flavors) for flavors in flavor_descriptions.values())
            result_message = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –≤–∫—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
            result_message += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            result_message += f"‚Ä¢ –ë—Ä–µ–Ω–¥–æ–≤: {len(flavor_descriptions)}\n"
            result_message += f"‚Ä¢ –í—Å–µ–≥–æ –≤–∫—É—Å–æ–≤: {total_flavors}\n\n"
            
            for brand, flavors in flavor_descriptions.items():
                if flavors:
                    result_message += f"‚Ä¢ {brand}: {len(flavors)} –≤–∫—É—Å–æ–≤\n"
            
            await update.message.reply_text(result_message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /baseflavor: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –≤–∫—É—Å–æ–≤: {str(e)}")
    
    async def handle_inventory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /inventory - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ç–∞–±–∞–∫–æ–≤"""
        try:
            await update.message.reply_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç (–∫–∞–∫ –≤ _publish_assortment)
            final_assortment = await self._prepare_assortment()
            if not final_assortment:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±—Ä–µ–Ω–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–∞–∫ –≤ _publish_assortment)
            for brand_name, brand_data in final_assortment.items():
                whole_packs = brand_data.get("whole_packs", [])
                loose_packs = brand_data.get("loose_packs", [])
                
                if whole_packs or loose_packs:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—Ä–µ–Ω–¥–∞ (–∫–∞–∫ –≤ _format_brand_message)
                    message = self._format_inventory_message(brand_name, whole_packs, loose_packs)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
                    await update.message.reply_text(message)
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(1)
            
            await update.message.reply_text("‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /inventory: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
    
    async def _prepare_assortment(self):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç - —Ç—è–Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç FinalAssortment"""
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞
            
            stock_data = await self._get_stock_data()
            if not stock_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")
                return None
            
        
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Üí href
            name_href_file = self.config['item_name_href_file']
            try:
                with open(name_href_file, "r", encoding="utf-8") as f:
                    name_to_href = json.load(f)
                
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ItemNameHref.json: {e}")
                
                return None
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å href ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ
            href_to_name = {href: name for name, href in name_to_href.items()}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤
            flavor_descriptions_file = self.config['flavor_descriptions_file']
            flavor_descriptions = {}
            try:
                with open(flavor_descriptions_file, "r", encoding="utf-8") as f:
                    flavor_descriptions = json.load(f)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤: {e}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
            final_assortment = {}
            
            # –ò–¥–µ–º –ø–æ –º–∞—Å—Å–∏–≤—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
            for brand in self.config['actual_brands']:
                
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –±—Ä–µ–Ω–¥–∞
                brand_data = {
                    "whole_packs": [],
                    "loose_packs": []
                }
                
                # –ò–¥–µ–º –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º —Å–æ —Å–∫–ª–∞–¥–∞
                if "rows" in stock_data:
                    for item in stock_data["rows"]:
                        # –ü–æ–ª—É—á–∞–µ–º href —Ç–æ–≤–∞—Ä–∞
                        item_href = self._get_item_href(item)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        available = self._get_available_quantity(item)
                        
                        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 0
                        if item_href in href_to_name and available > 0:
                            item_name = href_to_name[item_href]
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç–æ–≤–∞—Ä —ç—Ç–æ–º—É –±—Ä–µ–Ω–¥—É
                            if self._is_item_belongs_to_brand(item_name, brand):
                                # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –±—Ä–µ–Ω–¥–∞ –∏ –≤–µ—Å–∞
                                clean_name = self._clean_item_name(item_name, brand)
                                
                                # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫—É—Å–∞
                                flavor_link = self._find_flavor_link(brand, clean_name, flavor_descriptions)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –Ω–∞ "1–≥"
                                if item_name.endswith("1–≥") or item_name.endswith("(1–≥)"):
                                    # –ù–∞—Ä–∞–∑–≤–µ—Å - –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 25
                                    rounded_quantity = self._round_to_nearest_25(available)
                                    if rounded_quantity >= 25:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ >= 25–≥
                                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∫—É—Å–∞ –¥–ª—è loose_packs
                                        flavor_data = {
                                            "name": clean_name,
                                            "quantity": rounded_quantity,
                                            "link": flavor_link
                                        }
                                        brand_data["loose_packs"].append(flavor_data)
                                        link_info = f" (—Å—Å—ã–ª–∫–∞: {flavor_link})" if flavor_link else " (–±–µ–∑ —Å—Å—ã–ª–∫–∏)"
                                        
                                else:
                                    # –¶–µ–ª—ã–µ –ø–∞—á–∫–∏
                                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∫—É—Å–∞ –¥–ª—è whole_packs
                                    flavor_data = {
                                        "name": clean_name,
                                        "quantity": available,
                                        "link": flavor_link
                                    }
                                    brand_data["whole_packs"].append(flavor_data)
                                    link_info = f" (—Å—Å—ã–ª–∫–∞: {flavor_link})" if flavor_link else " (–±–µ–∑ —Å—Å—ã–ª–∫–∏)"
                                    
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
                if brand_data["whole_packs"] or brand_data["loose_packs"]:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤–Ω—É—Ç—Ä–∏ –±—Ä–µ–Ω–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    brand_data["whole_packs"].sort(key=lambda x: x["name"])
                    brand_data["loose_packs"].sort(key=lambda x: x["name"])
                    final_assortment[brand] = brand_data
                    whole_count = len(brand_data["whole_packs"])
                    loose_count = len(brand_data["loose_packs"])
                    
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
            final_file = self.config['final_assortment_file']
            with open(final_file, "w", encoding="utf-8") as f:
                json.dump(final_assortment, f, ensure_ascii=False, indent=2)
            
            
            return final_assortment
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {e}")
            return None
    
    async def _get_stock_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        try:
            logger.info("üîÑ –ü–æ–ª—É—á–∞—é –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞...")
            
            # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º
            url = "https://api.moysklad.ru/api/remap/1.2/report/stock/bystore"
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞—à–µ–º—É —Å–∫–ª–∞–¥—É (TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥)
            store_href = "https://api.moysklad.ru/api/remap/1.2/entity/store/5b0a00a8-3b99-11f0-0a80-09fd0007829f"
            params = {
                "filter": f"store={store_href}"
            }
            
            
            
            # –î–µ–ª–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
            async with aiohttp.ClientSession() as session:
                headers = {
                    'Authorization': f'Bearer {self.config["moy_sklad_token"]}',
                    'Content-Type': 'application/json'
                }
                async with session.get(url, headers=headers, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
                        stock_file = self.config['stock_data_file']
                        with open(stock_file, "w", encoding="utf-8") as f:
                            json.dump(data, f, ensure_ascii=False, indent=2)
                        
                        
                        return data
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status} - {error_text}")
                        return None
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return None
    
    def _get_available_quantity(self, item):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Å—Ç–∞—Ç–æ–∫ - —Ä–µ–∑–µ—Ä–≤)"""
        available = 0
        if "stockByStore" in item:
            for store_stock in item["stockByStore"]:
                stock = store_stock.get("stock", 0)
                reserve = store_stock.get("reserve", 0)
                available += (stock - reserve)
        return int(available)
    
    def _get_item_href(self, item):
        """–ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å—Ç—ã–π href —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        item_href = item.get("meta", {}).get("href", "")
        
        # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ href (–≤—Å—ë –ø–æ—Å–ª–µ ?)
        if "?" in item_href:
            item_href = item_href.split("?")[0]
        
        return item_href
    
    def _is_item_belongs_to_brand(self, item_name, brand):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç–æ–≤–∞—Ä —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±—Ä–µ–Ω–¥—É"""
        item_lower = item_name.lower()
        brand_lower = brand.lower()
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–õ–£–ß–ê–ò - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
        if brand == "Darkside Xperience":
            # –î–ª—è Xperience –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å "xperience" –∏–ª–∏ "darkside xperience"
            return "xperience" in item_lower or "darkside xperience" in item_lower
        elif brand == "Darkside":
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ Darkside –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å "xperience"
            if "xperience" in item_lower:
                return False
            return "darkside" in item_lower
        elif brand == "DS shot":
            # –î–ª—è DS shot –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å "ds shot"
            return "ds shot" in item_lower
        elif brand == "Blackburn":
            # –î–ª—è Blackburn –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å "blackburn"
            return "blackburn" in item_lower
        elif brand == "Overdose":
            # –î–ª—è Overdose –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å "overdose", –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º "blackburn ovd"
            if "blackburn" in item_lower:
                return False
            return "overdose" in item_lower
        
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
        brand_variants = [
            brand_lower,
            brand_lower.replace(" ", ""),
            brand_lower.replace(" ", "_"),
            brand_lower.replace(" ", "-")
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ª—é–±–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±—Ä–µ–Ω–¥–∞
        return any(variant in item_lower for variant in brand_variants)
    
    def _clean_item_name(self, item_name, brand):
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –±—Ä–µ–Ω–¥–∞ –∏ –≤–µ—Å–∞"""
        clean_name = item_name
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è DS Shot
        if brand == "DS shot":
            # –£–±–∏—Ä–∞–µ–º "DS Shot" –∏–∑ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            clean_name = re.sub(r'^DS\s+Shot\s+', '', clean_name, flags=re.IGNORECASE)
        elif brand == "Xperience":
            # –£–±–∏—Ä–∞–µ–º "Darkside Xperience" –∏–∑ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            clean_name = re.sub(r'^Darkside\s+Xperience\s+', '', clean_name, flags=re.IGNORECASE)
        else:
            # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤
            brand_variants = [brand, brand.replace(" ", ""), brand.replace(" ", "_")]
            for variant in brand_variants:
                if variant.lower() in clean_name.lower():
                    clean_name = clean_name.replace(variant, "").strip()
                    break
        
        # –£–±–∏—Ä–∞–µ–º –≤–µ—Å –≤ —Å–∫–æ–±–∫–∞—Ö
        clean_name = re.sub(r'\s*\(\d+–≥\)', '', clean_name)
        clean_name = re.sub(r'\s*\d+–≥', '', clean_name)
        clean_name = re.sub(r'\s*\(1–≥\)', '', clean_name)
        clean_name = re.sub(r'\s*1–≥', '', clean_name)
        
        return clean_name.strip()
    
    def _round_to_nearest_25(self, quantity):
        """–û–∫—Ä—É–≥–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 25 (–≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É)"""
        if quantity < 25:
            return 0
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 25
        return (quantity // 25) * 25
    
    def _find_flavor_link(self, brand_name, flavor_name, flavor_descriptions):
        """–ò—â–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫—É—Å–∞ - –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –í –ù–ò–ñ–ù–ï–ú –†–ï–ì–ò–°–¢–†–ï"""
        if brand_name in flavor_descriptions:
            brand_flavors = flavor_descriptions[brand_name]
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            flavor_name_lower = flavor_name.lower()
            for desc_flavor_name, link in brand_flavors.items():
                if desc_flavor_name.lower() == flavor_name_lower:
                    return link
                    
        return None
    
    async def _publish_assortment(self, final_assortment, update=None, context=None):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä—É–º"""
        try:
            print(f"üì§ –ü—É–±–ª–∏–∫—É—é –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç: {len(final_assortment)} –±—Ä–µ–Ω–¥–æ–≤")
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä—É–º (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            main_message_id = await self._clear_forum_except_oldest()
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –±—Ä–µ–Ω–¥—ã
            brand_links = {}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±—Ä–µ–Ω–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for brand_name, brand_data in final_assortment.items():
                whole_packs = brand_data.get("whole_packs", [])
                loose_packs = brand_data.get("loose_packs", [])
                
                if whole_packs or loose_packs:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—Ä–µ–Ω–¥–∞
                    message = self._format_brand_message(brand_name, whole_packs, loose_packs)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä—É–º —á–µ—Ä–µ–∑ Telethon
                    try:
                        sent_message = await self.telegram_client.send_message(
                            chat_id=self.config['forum_chat_id'],
                            message=message,
                            thread_id=self.config['forum_thread_id']
                        )
                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä—É–º: {brand_name} (–¶–µ–ª—ã—Ö –ø–∞—á–µ–∫: {len(whole_packs)} –ù–∞—Ä–∞–∑–≤–µ—Å: {len(loose_packs)} —Ç–æ–≤–∞—Ä–æ–≤)")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º
                        if update and context:
                            try:
                                notification_text = f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {brand_name} - {len(whole_packs) + len(loose_packs)} —Ç–æ–≤–∞—Ä–æ–≤"
                                await update.message.reply_text(notification_text)
                        
                            except Exception as notification_error:
                                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_error}")
                        
                        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        entity = await self.telegram_client.get_entity(self.config['forum_chat_id'])
                        chat_id_numeric = entity.id
                        message_link = f"https://t.me/c/{chat_id_numeric}/{sent_message.id}"
                        brand_links[brand_name] = message_link
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        import asyncio
                        await asyncio.sleep(4)
                        
                    except Exception as forum_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä—É–º: {forum_error}")
            
            # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            print(f"\nüìã –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –°–õ–û–í–ê–†–ò–ö –°–°–´–õ–û–ö:")
            for brand, link in brand_links.items():
                print(f"   {brand}: {link}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏
            if self.config['forum_chat_id'] and brand_links and main_message_id:
                await self._update_main_message_with_links(main_message_id, brand_links)
            
            print(f"üéâ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {e}")
            raise e
    
    def _format_brand_message(self, brand_name, whole_packs, loose_packs):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—Ä–µ–Ω–¥–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞–º–∏ –ø–æ –±–æ–∫–∞–º –∏ –∂–∏—Ä–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±—Ä–µ–Ω–¥–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
        message = f"‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è**{brand_name.upper()}**‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è\n\n"
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º —Ü–µ–ª—ã–µ –±–∞–Ω–æ—á–∫–∏
        for flavor in whole_packs:
            name = flavor.get("name", "")
            quantity = flavor.get("quantity", 0)
            link = flavor.get("link")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 3+
            display_quantity = "3+" if quantity > 3 else str(quantity)
            
            if link:
                # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É
                message += f"[{name}]({link}) {display_quantity}\n"
            else:
                # –ë–µ–∑ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏, –æ–±—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                message += f"{name} {display_quantity}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –≤—Å–∫—Ä—ã—Ç—ã–µ –≤–∫—É—Å—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if loose_packs:
            message += "\n---\n**–í—Å–∫—Ä—ã—Ç—ã–µ –≤–∫—É—Å—ã:**\n"
            
            for flavor in loose_packs:
                name = flavor.get("name", "")
                quantity = flavor.get("quantity", 0)
                link = flavor.get("link")
                
                if link:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥—Ä–∞–º–º
                    message += f"[{name}]({link}) {quantity}–≥\n"
                else:
                    # –ë–µ–∑ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏, –æ–±—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥—Ä–∞–º–º
                    message += f"{name} {quantity}–≥\n"
        
        return message
    
    def _format_inventory_message(self, brand_name, whole_packs, loose_packs):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è - —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ –ø–∞—á–∫–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞–º–∏ –ø–æ –±–æ–∫–∞–º –∏ –∂–∏—Ä–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±—Ä–µ–Ω–¥–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
        message = f"‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è{brand_name.upper()}‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ –ø–∞—á–∫–∏
        total_quantity = 0
        for flavor in whole_packs:
            name = flavor.get("name", "")
            quantity = flavor.get("quantity", 0)
            total_quantity += quantity
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            message += f"{name} {quantity}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ–Ω—Ü–µ
        if total_quantity > 0:
            message += f"\n–í—Å–µ–≥–æ: {total_quantity} —à—Ç"
        
        return message
    
    async def _clear_forum_except_oldest(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–æ—Ä—É–º, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä—É–º–µ
            messages = []
            async for message in self.telegram_client.iter_messages(
                self.config['forum_chat_id'], 
                reply_to=self.config['forum_thread_id'], 
                limit=None
            ):
                messages.append(message)
            
            
            for i, message in enumerate(messages):
                text_preview = message.text[:50] if message.text else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                print(f"   {i}: ID {message.id} | –î–∞—Ç–∞: {message.date} | –¢–µ–∫—Å—Ç: {text_preview}...")
            
            if len(messages) <= 1:
                print("‚úÖ –í —Ñ–æ—Ä—É–º–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞")
                return None
            
            # –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ç–µ–∫—Å—Ç–æ–º, —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ)
            main_messages = [m for m in messages if m.text and len(m.text) > 10]
            if not main_messages:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º!")
                return None
            
            main_message = min(main_messages, key=lambda m: m.date)
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ
            deleted_count = 0
            for message in messages:
                if message.id == main_message.id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    
                    continue
                
                try:
                    await self.telegram_client.delete_message(
                        chat_id=self.config['forum_chat_id'],
                        message_id=message.id
                    )
                    deleted_count += 1
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message.id}")
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message.id}: {e}")
            
            print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return main_message.id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä—É–º–∞: {e}")
            return None
    
    async def _update_main_message_with_links(self, main_message_id, brand_links):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –±—Ä–µ–Ω–¥–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            main_message = await self.telegram_client.get_message(
                chat_id=self.config['forum_chat_id'],
                message_id=main_message_id
            )
            
            if not main_message:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {main_message_id}")
                return
            
            current_text = main_message.text
            
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
            import re
            updated_text = current_text
            
            # –£–¥–∞–ª—è–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **
            updated_text = re.sub(r'\*\*', '', updated_text)
            
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)
            updated_text = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', updated_text)
            
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–æ—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ –∫ –∫–æ—Ä–æ—Ç–∫–æ–º—É)
            sorted_brands = sorted(brand_links.items(), key=lambda x: len(x[0]), reverse=True)
            
            for brand_name, link in sorted_brands:
                # –°–æ–∑–¥–∞–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
                hyperlink = f"[{brand_name}]({link})"
                
                # –ó–∞–º–µ–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                if brand_name in updated_text:
                    updated_text = updated_text.replace(brand_name, hyperlink)
                    print(f"üîó –ó–∞–º–µ–Ω–µ–Ω–æ '{brand_name}' –Ω–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É")
                else:
                    print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ '{brand_name}' –≤ —Ç–µ–∫—Å—Ç–µ")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
            if not updated_text.startswith('**'):
                updated_text = '**' + updated_text
            if not updated_text.endswith('**'):
                updated_text = updated_text + '**'
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.telegram_client.edit_message(
                chat_id=self.config['forum_chat_id'],
                message_id=main_message_id,
                text=updated_text
            )
            print(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _update_assortment(self, update=None, context=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º (–ø–æ—Å–ª–µ –æ—Ç–≥—Ä—É–∑–∫–∏)"""
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
            final_file = self.config['final_assortment_file']
            try:
                with open(final_file, "r", encoding="utf-8") as f:
                    assortment_data = json.load(f)
                print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω –°–í–ï–ñ–ò–ô –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç: {len(assortment_data)} –±—Ä–µ–Ω–¥–æ–≤")
            except FileNotFoundError:
                print("‚ùå –§–∞–π–ª –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤ —Å —Å—Å—ã–ª–∫–∞–º–∏
            flavor_descriptions_file = self.config['flavor_descriptions_file']
            flavor_descriptions = {}
            try:
                with open(flavor_descriptions_file, "r", encoding="utf-8") as f:
                    flavor_descriptions = json.load(f)
                print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤: {len(flavor_descriptions)} –±—Ä–µ–Ω–¥–æ–≤")
            except FileNotFoundError:
                print("‚ö†Ô∏è –§–∞–π–ª –æ–ø–∏—Å–∞–Ω–∏–π –≤–∫—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä—É–º–µ
            messages = []
            async for message in self.telegram_client.iter_messages(
                self.config['forum_chat_id'], 
                reply_to=self.config['forum_thread_id'], 
                limit=None
            ):
                if message.text:  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
                    messages.append(message)
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä—É–º–µ")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            messages.sort(key=lambda x: x.date)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–ª–∞–≤–Ω–æ–µ) - –æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
            brand_messages = messages[1:]  # –°–æ–æ–±—â–µ–Ω–∏—è —Å –±—Ä–µ–Ω–¥–∞–º–∏
            
            
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±—Ä–µ–Ω–¥–æ–º
            for i, (brand_name, brand_data) in enumerate(assortment_data.items()):
                if i >= len(brand_messages):
                    print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—Ä–µ–Ω–¥–∞ {i+1}")
                    break
                    
                whole_packs = brand_data.get("whole_packs", [])
                loose_packs = brand_data.get("loose_packs", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if whole_packs or loose_packs:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—Ä–µ–Ω–¥–∞ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏
                    new_message = self._format_brand_message(brand_name, whole_packs, loose_packs)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    message_to_update = brand_messages[i]
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    whole_packs_count = len(whole_packs)
                    loose_packs_count = len(loose_packs)
                    
                    
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await self.telegram_client.edit_message(
                            chat_id=self.config['forum_chat_id'],
                            message_id=message_to_update.id,
                            text=new_message
                        )
                        
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {brand_name} ({whole_packs_count + loose_packs_count} —Ç–æ–≤–∞—Ä–æ–≤)")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                        if update and context:
                            try:
                                notification_text = f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {brand_name} - {whole_packs_count + loose_packs_count} —Ç–æ–≤–∞—Ä–æ–≤"
                                await update.message.reply_text(notification_text)
                                
                            except Exception as notification_error:
                                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_error}")
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                        import asyncio
                        await asyncio.sleep(5)
                        
                    except Exception as e:
                        error_msg = str(e)
                        if "Content of the message was not modified" in error_msg:
                            print(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {brand_name} - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ —Ç–∞–±–∞–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                            if update and context:
                                try:
                                    notification_text = f"‚ÑπÔ∏è {brand_name} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω."
                                    await update.message.reply_text(notification_text)
                                    
                                except Exception as notification_error:
                                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_error}")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {e}")
            
            
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏
            if messages and len(messages) > 0:
                main_message_id = messages[0].id  # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –≥–ª–∞–≤–Ω–æ–µ
                print(f"üîç –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {main_message_id}")
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –±—Ä–µ–Ω–¥—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ–æ—Ä—É–º–∞
                brand_links = {}
                print(f"üîç –ò—â—É —Å—Å—ã–ª–∫–∏ –¥–ª—è {len(assortment_data)} –±—Ä–µ–Ω–¥–æ–≤ –≤ {len(brand_messages)} —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
                
                # –ü–æ–ª—É—á–∞–µ–º entity –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
                entity = await self.telegram_client.get_entity(self.config['forum_chat_id'])
                chat_id_numeric = entity.id
                
                for i, (brand_name, brand_data) in enumerate(assortment_data.items()):
                    if i < len(brand_messages):
                        message = brand_messages[i]
                        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message_link = f"https://t.me/c/{chat_id_numeric}/{message.id}"
                        brand_links[brand_name] = message_link
                        print(f"üîç –ë—Ä–µ–Ω–¥ '{brand_name}': —Å—Å—ã–ª–∫–∞ = {message_link}")
                
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(brand_links)} —Å—Å—ã–ª–æ–∫: {list(brand_links.keys())}")
                if brand_links:
                    await self._update_main_message_with_links(main_message_id, brand_links)
                    print("üîó –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏!")
                else:
                    print("‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {e}")
    
    async def start_auto_publish(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞"""
        if self.auto_publish_running:
            logger.warning("–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        self.auto_publish_running = True
        logger.info("üïê –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞ (12:00 UTC+7)")
        print("üïê –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞ (12:00 UTC+7)")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(self._auto_publish_loop())
    
    async def _auto_publish_loop(self):
        """–§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞"""
        while self.auto_publish_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC+7 (–î–∞–Ω–∞–Ω–≥)
                from datetime import timedelta
                now_utc7 = datetime.utcnow() + timedelta(hours=7)
                current_time = now_utc7.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: —Å–µ–π—á–∞—Å 12:00?
                if current_time.hour == 12 and current_time.minute == 0:
                    print(f"üïê [{now_utc7.strftime('%Y-%m-%d %H:%M')}] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞...")
                    await self._auto_publish_assortment()
                    # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∞–∂–¥—ã
                    await asyncio.sleep(60)
                
                # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(60)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(60)
    
    async def _auto_publish_assortment(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞"""
        try:
            print("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –æ–¥–∏–Ω —Ä–∞–∑
            final_assortment = await self._prepare_assortment()
            if not final_assortment:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
                return
            
            # –ü—É–±–ª–∏–∫—É–µ–º –°–ù–ê–ß–ê–õ–ê –≤ Gastro —Ñ–æ—Ä—É–º
            print("üîÑ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Gastro —Ñ–æ—Ä—É–º...")
            await self._publish_to_gastro_forum(final_assortment)
            
            # –ü–æ—Ç–æ–º –ø—É–±–ª–∏–∫—É–µ–º –≤ Shisha —Ñ–æ—Ä—É–º
            print("üîÑ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Shisha —Ñ–æ—Ä—É–º...")
            await self._publish_assortment(final_assortment)
            
            print("‚úÖ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {e}")
    
    async def _publish_to_gastro_forum(self, final_assortment):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–Ω—é –≤ Gastro —Ñ–æ—Ä—É–º"""
        try:
            print(f"üì§ [GASTRO] –ü—É–±–ª–∏–∫—É—é –º–µ–Ω—é...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gastro —Ñ–æ—Ä—É–º–∞
            gastro_chat_id = self.config['gastro_forum_chat_id']
            gastro_thread_id = self.config['gastro_forum_thread_id']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é –∏–∑ JSON
            menu_file = self.config['menu_file']
            try:
                with open(menu_file, 'r', encoding='utf-8') as f:
                    menu_data = json.load(f)
                    menu_text = menu_data.get('menu_text', '')
            except Exception as e:
                print(f"‚ùå [GASTRO] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è menu.json: {e}")
                return
            
            # –°–ù–ê–ß–ê–õ–ê —É–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–µ—Ç–∫–∏
                messages = []
                async for message in self.telegram_client.iter_messages(
                    gastro_chat_id,
                    reply_to=gastro_thread_id,
                    limit=100
                ):
                    messages.append(message)
                
                print(f"üîç [GASTRO] –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤–µ—Ç–∫–µ")
                
                # –£–¥–∞–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è
                if messages:
                    print(f"üóëÔ∏è [GASTRO] –£–¥–∞–ª—è—é {len(messages)} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
                    
                    for msg in messages:
                        try:
                            await self.telegram_client.delete_message(
                                chat_id=gastro_chat_id,
                                message_id=msg.id
                            )
                            print(f"‚úÖ [GASTRO] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {msg.id}")
                        except Exception as del_error:
                            print(f"‚ö†Ô∏è [GASTRO] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id}: {del_error}")
                else:
                    print(f"‚ÑπÔ∏è [GASTRO] –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                
            except Exception as e:
                print(f"‚ö†Ô∏è [GASTRO] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            
            # –ü–û–¢–û–ú –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ø–∞–ø–∫–∏
                import os
                import glob
                photo_dir = 'data/picture'
                photo_files = glob.glob(os.path.join(photo_dir, '*.jpg')) + glob.glob(os.path.join(photo_dir, '*.png'))
                
                print(f"üì∏ [GASTRO] –ù–∞–π–¥–µ–Ω–æ {len(photo_files)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_files}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –º–µ–Ω—é —á–µ—Ä–µ–∑ Telethon
                from telethon import TelegramClient
                client = TelegramClient(self.telegram_client.session_file, self.telegram_client.api_id, self.telegram_client.api_hash)
                
                await client.start()
                entity = await client.get_entity(gastro_chat_id)
                
                if photo_files:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    sent_messages = await client.send_file(
                        entity,
                        photo_files,
                        caption=menu_text,
                        reply_to=gastro_thread_id,
                        parse_mode='markdown'
                    )
                    
                    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –±–µ—Ä–µ–º ID –ø–µ—Ä–≤–æ–≥–æ
                    if isinstance(sent_messages, list):
                        new_message_id = sent_messages[0].id
                    else:
                        new_message_id = sent_messages.id
                    
                    print(f"‚úÖ [GASTRO] –ù–æ–≤–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ (ID: {new_message_id})")
                else:
                    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    sent_message = await client.send_message(
                        entity,
                        menu_text,
                        reply_to=gastro_thread_id,
                        parse_mode='markdown'
                    )
                    new_message_id = sent_message.id
                    print(f"‚úÖ [GASTRO] –ù–æ–≤–æ–µ –º–µ–Ω—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ (ID: {new_message_id})")
                
                await client.disconnect()
                
            except Exception as send_error:
                print(f"‚ùå [GASTRO] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é: {send_error}")
            
            print("‚úÖ [GASTRO] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå [GASTRO] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            print(f"‚ùå [GASTRO] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    async def handle_publish_menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–Ω—é –≤ Gastro —Ñ–æ—Ä—É–º (/publishmenu)"""
        try:
            await update.message.reply_text("üì§ –ü—É–±–ª–∏–∫—É—é –º–µ–Ω—é –≤ Gastro —Ñ–æ—Ä—É–º...")
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, —á—Ç–æ–±—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –±—ã–ª–∞ –ø—É—Å—Ç–æ–π (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–µ–Ω—é)
            final_assortment = await self._prepare_assortment()
            await self._publish_to_gastro_forum(final_assortment or {})
            await update.message.reply_text("‚úÖ –ú–µ–Ω—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–Ω—é: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–Ω—é")
    
    def stop_auto_publish(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        self.auto_publish_running = False
        logger.info("üõë –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("üõë –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
