"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.moy_sklad import MoySkladAPI
from services.google_sheets import GoogleSheetsService
from utils.parsers import parse_order_message
from utils.validators import validate_order_data

logger = logging.getLogger(__name__)

class OrderHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self, moy_sklad: MoySkladAPI, google_sheets: GoogleSheetsService, telegram_client, config: dict, assortment_handler=None):
        self.moy_sklad = moy_sklad
        self.google_sheets = google_sheets
        self.telegram_client = telegram_client
        self.config = config
        self.assortment_handler = assortment_handler
        self.notifications = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ
    
    
    async def handle_shisha(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è ShishaDanang"""
        try:
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            order_data = await parse_order_message(update.message.text)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if not validate_order_data(order_data):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ú–æ–π –°–∫–ª–∞–¥
            order = await self.moy_sklad.create_order(order_data)
            order_href = order.get("meta", {}).get("href")
            
            if not order_href:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
                return
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ Bot Manager
            botmanager_state_href = self.config.get('order_states', {}).get('botmanager')
            if botmanager_state_href:
                await self.moy_sklad.change_order_state(order_href, botmanager_state_href)
                print("üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ Bot Manager")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
            context.user_data["last_order"] = order
            context.user_data["last_order_data"] = order_data
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –ú–°")
             
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –≤ Google Sheets
            await self._write_order_to_sheets(order_data, update)
            print("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–ø–∏—Å–∞–Ω –≤ Google Sheets")
            await update.message.reply_text("üìä –ó–∞–∫–∞–∑ –∑–∞–ø–∏—Å–∞–Ω –≤ Google Sheets")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            message = await self.get_order_message(order_href, order_data.get('overheads'))
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data["last_order"] = order
            
        except Exception as e:
            
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    
    async def handle_gastro(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è Gastroheaven"""
        try:
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            order_data = await parse_order_message(update.message.text)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if not validate_order_data(order_data):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")
                return
            
            # –î–ª—è Gastro —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
            await self._write_order_to_sheets(order_data, update)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç {order_data.get('username', 'N/A')} –∑–∞–ø–∏—Å–∞–Ω –≤ Gastro —Ç–∞–±–ª–∏—Ü—ã"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            if self.notifications:
                self.notifications.log_order_created(order_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ Gastro: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        try:
            data = query.data.split(":")
            action = data[0]
            
            if action == "confirm_order":
                order_href = data[1] if len(data) > 1 else None
                order_data = context.user_data.get("last_order_data", {})
                overheads = order_data.get("overheads", 0)
                await self._confirm_order(query, context, order_href, overheads, update)
            elif action == "cancel_order":
                await self._cancel_order(query, context)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    async def _confirm_order(self, query, context: ContextTypes.DEFAULT_TYPE, order_href: str, overheads: int, update):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            order = context.user_data.get("last_order")
            if not order:
                await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            order_href = order.get("meta", {}).get("href")
            order_message = await self.get_order_message(order_href, overheads)
            print("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
            await query.edit_message_text(
                f"‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û\n\n{order_message}",
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = await self.moy_sklad.create_payment(order_href)
            
            print("üí∞ –ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω")
            await query.message.reply_text("üí∞ –ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω.")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≥—Ä—É–∑–∫—É
            order_data = context.user_data.get("last_order_data")
            overheads = order_data.get("overheads", False)
            demand = await self.moy_sklad.create_demand(order_href, overheads)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–≥—Ä—É–∑–∫–µ
            await query.message.reply_text("üì¶ –û—Ç–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.")
            print("üì¶ –û—Ç–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–æ—Å–ª–µ –æ—Ç–≥—Ä—É–∑–∫–∏
            if self.assortment_handler:
                # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ú–æ–π –°–∫–ª–∞–¥
                await self.assortment_handler._prepare_assortment()
                # –ü–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä—É–º–µ
                await self.assortment_handler._update_assortment(update, context)
                await query.message.reply_text("üîÑ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–≥—Ä—É–∑–∫–∏")
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
            delivered_state_href = self.config.get('order_states', {}).get('–¥–æ—Å—Ç–∞–≤–ª–µ–Ω')
            if delivered_state_href:
                await self.moy_sklad.change_order_state(order_href, delivered_state_href)
                print("üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –î–æ—Å—Ç–∞–≤–ª–µ–Ω")
                
        
            
                 
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    
    
    async def _cancel_order(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            
            order = context.user_data.get("last_order")
            if not order:
                await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            order_href = order.get("meta", {}).get("href")
            order_data = context.user_data.get("last_order_data")
            overheads = order_data.get("overheads", False)
            cancel_message = await self.get_order_message(order_href, overheads)
            
            await query.edit_message_text(
                f"‚ùå **–û—Ç–º–µ–Ω–µ–Ω–æ**\n\n{cancel_message}",
            )
                      
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞")
    
    
    async def get_order_message(self, order_href: str, overheads: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –ø–æ order_href"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ú–æ–π –°–∫–ª–∞–¥
        order = await self.moy_sklad.get_order_by_href(order_href)
        if not order:
            return "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        positions = await self.moy_sklad.get_order_positions(order_href)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
        agent_href = order.get('agent', {}).get('meta', {}).get('href')
        client_name = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        if agent_href:
            client_name = await self.moy_sklad.get_agent_by_href(agent_href)
    
        
        # –°—á–∏—Ç–∞–µ–º –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ –∑–∞–∫–∞–∑–∞
        order_sum = order.get('sum', 0) / 100000
        delivery_cost = int(order.get('description', 0))
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞ - —ç—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
    
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"–ö–ª–∏–µ–Ω—Ç: {client_name}\n"
        message += f"–°—É–º–º–∞: {order.get('sum', 0) / 100000}\n"
        message += f"–î–æ—Å—Ç–∞–≤–∫–∞: {order.get('description', 'N/A')}\n"
        message += f"–ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {overheads}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ú–æ–π –°–∫–ª–∞–¥
        message += "–ó–∞–∫–∞–∑:\n"
        for product_name, product_data in positions.items():
            quantity = product_data.get('quantity', 0)
            price = product_data.get('price', 0)
            message += f"‚Ä¢ {product_name} x{quantity:.0f} ‚Äî {price:.0f}\n"
        
        return message
    
    async def _write_order_to_sheets(self, order_data: dict, update):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–∫–∞–∑–∞ –≤ Google Sheets (Shisha/Gastro)"""
        try:
            

            spreadsheet_id = self.config['spreadsheet_id']  # –û–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (Shisha/Gastro) –ø–æ –û–¢–ü–†–ê–í–ò–¢–ï–õ–Æ
            sender_username = update.message.from_user.username
             
            if sender_username == self.config['shisha_username']:
                sheet_type = "Shisha"
                worksheet_name = self.config['shisha_worksheet_name']  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                
            elif sender_username == self.config['gastro_username']:
                sheet_type = "Gastro"
                worksheet_name = self.config['gastro_worksheet_name']  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                
            else:
                sheet_type = "Unknown"
                print(f"‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: {sender_username}")
                worksheet_name = self.config['gastro_worksheet_name']  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
            from datetime import timedelta
            now = datetime.utcnow() + timedelta(hours=7)
            date = now.strftime("%d.%m")
     
            username = order_data.get('username', '').lstrip('@')  # —É–¥–∞–ª—è–µ—Ç @ –≤ –Ω–∞—á–∞–ª–µ
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è —á–µ—Ä–µ–∑ Telethon (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
            full_name = await self.telegram_client.get_full_name(f"@{username}")
            client_link = f'=HYPERLINK("https://t.me/{username}"; "{full_name} @{username}")'
            
            comment = order_data.get('comment', '')
            delivery = order_data.get('delivery_cost', '')
            
            # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
            cash = ''
            ivanqr = ''
            transfer = ''
            
            payment = order_data.get('payment_method', '').lower()
            summa = order_data.get('total', 0)
            
            
            
            if '–Ω–∞–ª–∏—á–Ω—ã–µ' in payment:
                cash = summa
            elif '–∏–≤–∞–Ω–∫—Ä' in payment:
                ivanqr = summa
            elif '–ø–µ—Ä–µ–≤–æ–¥' in payment:
                transfer = summa
            else:
                cash = summa
            
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
            row_data = [date, client_link, comment, delivery, cash, ivanqr, transfer]
                   
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
            result = await self.google_sheets.write_to_sheet(
                spreadsheet_id=spreadsheet_id,
                worksheet_name=worksheet_name,
                data=[row_data]
            )
            
            print(f"‚úÖ –ó–∞–∫–∞–∑ {sheet_type} –∑–∞–ø–∏—Å–∞–Ω –≤ Google Sheets")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞ –≤ Google Sheets: {e}")
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    
