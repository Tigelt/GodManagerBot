"""
–ü–∞—Ä—Å–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import logging
from typing import Dict, List, Any

logger = logging.getLogger(__name__)

# –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤
ABBREVIATIONS = {
    "bb": "Blackburn",
    "cb": "Chabacco", 
    "ds": "Darkside",
    "mh": "Musthave",
    "sl": "Starline",
    "od": "Overdose",
    "—ç–Ω—Ç": "–≠–Ω—Ç—É–∑–∏–∞—Å—Ç",
    "sr": "Satyr"
}

async def parse_order_message(text: str) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:
    username
    payment_method
    manual_sum
    delivery_cost
    comment
    item_name quantity price
    item_name quantity price
    ...
    """
    try:
        lines = [line.strip() for line in text.split('\n')]
        lines_iter = iter(lines)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        def next_non_empty():
            for line in lines_iter:
                if line.strip():
                    return line.strip()
            return None
            
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–±–ª–æ–Ω—É
        username = next_non_empty()
        if not username:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω username")
            
        payment_method = next_non_empty()
        if not payment_method:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
            
        manual_sum = int(next_non_empty())
        delivery_cost = int(next_non_empty())
        comment = next_non_empty() or ""
        
        # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
        total = 0
        items = []
        
        for line in lines_iter:
            if line.strip():
                parts = line.rsplit(' ', 2)
                if len(parts) < 3:
                    raise ValueError(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–æ–≤–∞—Ä–∞: {line}")
                    
                name = ' '.join(parts[:-2]).lower()
                quantity = int(parts[-2])
                price = int(parts[-1])
                
                # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                for abbr, full in ABBREVIATIONS.items():
                    if name.startswith(abbr + " "):
                        name = name.replace(abbr, full, 1)
                        break
                        
                items.append({
                    'name': name,
                    'quantity': quantity,
                    'price': price
                })
                total += price
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
        overheads = 0
        # –ù–∞–∫–ª–∞–¥–Ω—ã–µ = –¥–æ—Å—Ç–∞–≤–∫–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ + –¥–æ—Å—Ç–∞–≤–∫–∞ = —É–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞
        if manual_sum - delivery_cost < total:
            overheads = delivery_cost
        
        result = {
            'username': username,
            'payment_method': payment_method,
            'manual_sum': manual_sum,
            'delivery_cost': delivery_cost,
            'comment': comment,
            'total': total,
            'overheads': overheads,
            'items': items
        }
        
        print("üîç DEBUG PARSER - –í–°–ï –î–ê–ù–ù–´–ï:")
        print(f"  username: {username}")
        print(f"  payment_method: {payment_method}")
        print(f"  manual_sum: {manual_sum}")
        print(f"  delivery_cost: {delivery_cost}")
        print(f"  comment: {comment}")
        print(f"  total: {total}")
        print(f"  overheads: {overheads}")
        print(f"  items: {items}")
        print(f"  –†–ê–°–ß–ï–¢: total({total}) != manual_sum({manual_sum}) = {total != manual_sum}")
        print(f"  –†–ï–ó–£–õ–¨–¢–ê–¢: overheads = {overheads}")
        print("=" * 60)
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–∞: {e}")
