"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
"""

import base64
import logging
import os
import json
from typing import List, Dict, Optional

logger = logging.getLogger(__name__)

class GoogleSheetsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self, key_base64: str):
        self.key_base64 = key_base64
        self.key_file_path = "google_sheets_key.json"
        self.gc = None  # gspread client
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–ª—é—á–∞ –∏–∑ base64
            await self._create_key_file()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gspread (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
            import gspread
            from google.oauth2.service_account import Credentials
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞
            scope = [
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            creds = Credentials.from_service_account_file(
                self.key_file_path, 
                scopes=scope
            )
            
            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
            self.gc = gspread.authorize(creds)
            logger.info("‚úÖ Google Sheets —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
            raise
    
    async def _create_key_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–ª—é—á–∞ –∏–∑ base64"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            key_data = base64.b64decode(self.key_base64)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(self.key_file_path, 'wb') as f:
                f.write(key_data)
            
            logger.info("‚úÖ –§–∞–π–ª –∫–ª—é—á–∞ Google Sheets —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–ª—é—á–∞: {e}")
            raise
    
    async def write_to_sheet(self, spreadsheet_id: str, worksheet_name: str, data: List[List]) -> bool:
        """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É"""
        try:
            print(f"üîç –û—Ç–∫—Ä—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É: {spreadsheet_id}")
            print(f"üîç –õ–∏—Å—Ç: {worksheet_name}")
            print(f"üîç –î–∞–Ω–Ω—ã–µ: {data}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.gc.open_by_key(spreadsheet_id)
            worksheet = spreadsheet.worksheet(worksheet_name)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É 4)
            print(f"üîÑ –í–´–ó–´–í–ê–Æ insert_row —Å –¥–∞–Ω–Ω—ã–º–∏: {data[0]}")
            worksheet.insert_row(data[0], index=4, value_input_option="USER_ENTERED")
            print(f"‚úÖ –°–¢–†–û–ö–ê –í–°–¢–ê–í–õ–ï–ù–ê –í –ü–û–ó–ò–¶–ò–Æ 4")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
            print(f"üîç –ü–†–û–í–ï–†–Ø–Æ –ö–û–õ–ò–ß–ï–°–¢–í–û –°–¢–†–û–ö –ü–û–°–õ–ï –ó–ê–ü–ò–°–ò...")
            row_count = worksheet.row_count
            print(f"üìä –ö–û–õ–ò–ß–ï–°–¢–í–û –°–¢–†–û–ö –í –õ–ò–°–¢–ï: {row_count}")
            
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if row_count > 0:
                last_rows = worksheet.get(f"A{row_count}:G{row_count}")
                print(f"üìã –ü–û–°–õ–ï–î–ù–ò–ï –°–¢–†–û–ö–ò: {last_rows}")
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {worksheet_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
            return False
    
    async def read_from_sheet(self, spreadsheet_id: str, worksheet_name: str, range_name: Optional[str] = None) -> List[List]:
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.gc.open_by_key(spreadsheet_id)
            worksheet = spreadsheet.worksheet(worksheet_name)
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if range_name:
                data = worksheet.get(range_name)
            else:
                data = worksheet.get_all_values()
            
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –∏–∑ {worksheet_name}")
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return []
    
    async def update_cell(self, spreadsheet_id: str, worksheet_name: str, cell: str, value: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.gc.open_by_key(spreadsheet_id)
            worksheet = spreadsheet.worksheet(worksheet_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É
            worksheet.update(cell, value)
            
            logger.info(f"‚úÖ –Ø—á–µ–π–∫–∞ {cell} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏: {e}")
            return False
    
    async def create_worksheet(self, spreadsheet_id: str, worksheet_name: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.gc.open_by_key(spreadsheet_id)
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç
            spreadsheet.add_worksheet(title=worksheet_name, rows=1000, cols=20)
            
            logger.info(f"‚úÖ –õ–∏—Å—Ç {worksheet_name} —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞: {e}")
            return False
    
    async def get_worksheet_info(self, spreadsheet_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∞—Ö"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.gc.open_by_key(spreadsheet_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö
            worksheets = []
            for worksheet in spreadsheet.worksheets():
                worksheets.append({
                    'title': worksheet.title,
                    'id': worksheet.id,
                    'row_count': worksheet.row_count,
                    'col_count': worksheet.col_count
                })
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(worksheets)} –ª–∏—Å—Ç–∞—Ö")
            return worksheets
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∞—Ö: {e}")
            return []
    
    async def format_sheet(self, spreadsheet_id: str, worksheet_name: str, format_data: Dict) -> bool:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.gc.open_by_key(spreadsheet_id)
            worksheet = spreadsheet.worksheet(worksheet_name)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if 'header_format' in format_data:
                worksheet.format('A1:Z1', format_data['header_format'])
            
            if 'data_format' in format_data:
                worksheet.format('A2:Z1000', format_data['data_format'])
            
            logger.info(f"‚úÖ –õ–∏—Å—Ç {worksheet_name} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞: {e}")
            return False
