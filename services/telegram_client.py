"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —á–µ—Ä–µ–∑ Telethon
–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ, –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
"""

import logging
import os
from telethon import TelegramClient
from telethon.tl.types import Message
from typing import List, Dict, Optional

logger = logging.getLogger(__name__)

class TelegramClientService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —á–µ—Ä–µ–∑ Telethon"""
    
    def __init__(self, api_id: int, api_hash: str, session_file: str):
        self.api_id = api_id
        self.api_hash = api_hash
        self.session_file = session_file
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é Telegram —Å–µ—Å—Å–∏—é...")
        
        session_valid = await self.check_session_validity()
        if not session_valid:
            logger.error("‚ùå Telegram —Å–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞!")
            raise Exception("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –≤–∞–ª–∏–¥–Ω–∞—è Telegram —Å–µ—Å—Å–∏—è")
        
        logger.info("‚úÖ Telegram —Å–µ—Å—Å–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    
    async def send_message(self, chat_id: str, message: str, thread_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç/—Ñ–æ—Ä—É–º"""
        client = TelegramClient(self.session_file, self.api_id, self.api_hash)
        
        try:
            await client.start()
            
            if thread_id:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ñ–æ—Ä—É–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º thread_id
                sent_message = await client.send_message(chat_id, message, reply_to=thread_id, link_preview=False)
            else:
                # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
                sent_message = await client.send_message(chat_id, message, link_preview=False)
                
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
            return sent_message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
        finally:
            await client.disconnect()
    
    async def get_messages(self, chat_id: str, limit: int = 100) -> List[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞"""
        client = TelegramClient(self.session_file, self.api_id, self.api_hash)
        
        try:
            await client.start()
            
            messages = []
            async for message in client.iter_messages(chat_id, limit=limit):
                messages.append(message)
                
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {chat_id}")
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            raise
        finally:
            await client.disconnect()
    
    async def get_chat_messages(self, chat_id: str, thread_id: int, limit: int = 100) -> List[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞ —Ñ–æ—Ä—É–º–∞"""
        client = TelegramClient(self.session_file, self.api_id, self.api_hash)
        
        try:
            await client.start()
            
            messages = []
            async for message in client.iter_messages(chat_id, limit=limit):
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ thread_id
                if hasattr(message, 'reply_to') and message.reply_to and message.reply_to.reply_to_msg_id == thread_id:
                    messages.append(message)
                    
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç—Ä–µ–¥–∞ {thread_id}")
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç—Ä–µ–¥–∞: {e}")
            raise
        finally:
            await client.disconnect()
    
    async def check_session_validity(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ (–±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)"""
        if not os.path.exists(self.session_file):
            logger.warning(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.session_file}")
            return False
            
        client = TelegramClient(self.session_file, self.api_id, self.api_hash)
        
        try:
            await client.start()
            
            if await client.is_user_authorized():
                me = await client.get_me()
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
                return True
            else:
                logger.warning("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞!")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False
        finally:
            await client.disconnect()

    async def get_entity(self, chat_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ"""
        client = TelegramClient(self.session_file, self.api_id, self.api_hash)
        try:
            await client.start()
            entity = await client.get_entity(chat_id)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {entity.title}")
            return entity
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {chat_id}: {e}")
            raise
        finally:
            await client.disconnect()

    async def iter_messages(self, entity, reply_to=None, limit=None):
            """–ò—Ç–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞"""
            client = TelegramClient(self.session_file, self.api_id, self.api_hash)
            try:
                await client.start()
                async for message in client.iter_messages(entity, reply_to=reply_to, limit=limit):
                    yield message
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                raise
            finally:
                await client.disconnect()

    async def get_full_name(self, username: str) -> str:
            """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
            client = TelegramClient(self.session_file, self.api_id, self.api_hash)
            try:
                await client.start()
                user = await client.get_entity(username)
                full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                if not full_name:
                    full_name = username  # –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º username
                return full_name
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –¥–ª—è {username}: {e}")
                return username  # Fallback –Ω–∞ username
            finally:
                await client.disconnect()
    
    async def delete_message(self, chat_id: str, message_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        client = TelegramClient(self.session_file, self.api_id, self.api_hash)
        try:
            await client.start()
            await client.delete_messages(chat_id, message_id)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
        finally:
            await client.disconnect()
    
    async def get_message(self, chat_id: str, message_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        client = TelegramClient(self.session_file, self.api_id, self.api_hash)
        try:
            await client.start()
            entity = await client.get_entity(chat_id)
            # get_messages —Å ids –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç Message, –Ω–µ —Å–ø–∏—Å–æ–∫
            message = await client.get_messages(entity, ids=message_id)
            return message
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
        finally:
            await client.disconnect()
    
    async def edit_message(self, chat_id: str, message_id: int, text: str):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        client = TelegramClient(self.session_file, self.api_id, self.api_hash)
        try:
            await client.start()
            entity = await client.get_entity(chat_id)
            await client.edit_message(entity, message_id, text, parse_mode='Markdown', link_preview=False)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
        finally:
            await client.disconnect()