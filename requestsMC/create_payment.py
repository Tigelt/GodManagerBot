from datetime import datetime
from telegram import Update
import requests
from configMC import headers

async def create_payment_for_order(order_href, update, context):
    url = "https://api.moysklad.ru/api/remap/1.2/entity/paymentin"

    order = context.user_data.get("last_order")
    if not order:
        await update.effective_chat.send_message("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.")
        return

    organization_href = order["organization"]["meta"]["href"]
    agent_href = order["agent"]["meta"]["href"]

    data = {
        "operations": [{
            "meta": {
                "href": order_href,
                "type": "customerorder",
                "mediaType": "application/json"
            }
        }],
        #"moment": datetime.now().astimezone().isoformat(timespec="seconds"),  # –≤—Å—ë –∂–µ –Ω—É–∂–µ–Ω, –∏–Ω–∞—á–µ 400
        "organization": {
            "meta": {
                "href": organization_href,
                "type": "organization",
                "mediaType": "application/json"
            }
        },
        "agent": {
            "meta": {
                "href": agent_href,
                "type": "counterparty",
                "mediaType": "application/json"
            }
        },
        "sum": order.get("sum", 0)  # –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
    }

    response = requests.post(url, headers=headers, json=data)

    if response.status_code == 200:
        await update.effective_chat.send_message("üí∞ –ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω.")
    else:
        await update.effective_chat.send_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂: {response.text}")