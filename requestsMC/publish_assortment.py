# –§—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –≤ —á–∞—Ç
import json
import asyncio
from telethon import TelegramClient
from configMC import FORUM_CHAT_ID, FORUM_THREAD_ID, API_ID, API_HASH, SESSION_FILE, FLAVOR_CHANNEL, FLAVOR_THREAD_ID, DATA_DIR, IMAGES_DIR, BRAND_IMAGES

async def publish_assortment(update, context):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –≤ —á–∞—Ç"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä—É–º (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if FORUM_CHAT_ID:
            main_message_id = await clear_forum_except_oldest()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
        final_file = "requestsMC/data/shisha/FinalAssortment.json"
        
        with open(final_file, "r", encoding="utf-8") as f:
            assortment_data = json.load(f)
        
        print(f"üì§ –ü—É–±–ª–∏–∫—É—é –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç: {len(assortment_data)} –±—Ä–µ–Ω–¥–æ–≤")
        
        # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –°–õ–û–í–ê–†–ò–ö –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –°–°–´–õ–û–ö –ù–ê –ë–†–ï–ù–î–´ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –±–µ–∑ –≥—Ä–∞–º–º –∏ —Ü–µ–Ω)
        brand_links = {}
        
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±—Ä–µ–Ω–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for brand_name, brand_data in assortment_data.items():
            whole_packs = brand_data.get("whole_packs", [])
            loose_packs = brand_data.get("loose_packs", [])
            
            if whole_packs or loose_packs:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—Ä–µ–Ω–¥–∞ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏
                message = format_brand_message_with_links(brand_name, whole_packs, loose_packs)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä—É–º –∏–ª–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                if FORUM_CHAT_ID:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä—É–º —á–µ—Ä–µ–∑ Telethon (–æ—Ç —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏)
                    try:
                        sent_message, message_link = await send_to_forum_via_telethon(message, FORUM_CHAT_ID, FORUM_THREAD_ID, parse_mode='Markdown', brand_name=brand_name)
                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä—É–º –æ—Ç —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏: {brand_name} ({len(whole_packs) + len(loose_packs)} —Ç–æ–≤–∞—Ä–æ–≤)")
                        print(f"üîó –°–°–´–õ–ö–ê –ù–ê –°–û–û–ë–©–ï–ù–ò–ï: {message_link}")
                        
                        # –°–û–•–†–ê–ù–Ø–ï–ú –°–°–´–õ–ö–£ –í –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –°–õ–û–í–ê–†–ò–ö (–Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∫–∞–∫ –µ—Å—Ç—å)
                        brand_links[brand_name] = message_link
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∏–∑–±–µ–≥–∞–µ–º –ª–∏–º–∏—Ç —Ñ–ª—É–¥–∞)
                        await asyncio.sleep(4)
                        
                    except Exception as forum_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä—É–º: {forum_error}")
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤ —Ñ–æ—Ä—É–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                        await update.message.reply_text(message, parse_mode='HTML')
                        print(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ä—É–º–∞: {brand_name}")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç (–∫–∞–∫ –±—ã–ª–æ)
                    await update.message.reply_text(message, parse_mode='HTML')
                    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –±—Ä–µ–Ω–¥: {brand_name} ({len(items)} —Ç–æ–≤–∞—Ä–æ–≤)")
        
        print(f"üéâ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –í–´–í–û–î–ò–ú –í–°–ï –°–û–ë–†–ê–ù–ù–´–ï –°–°–´–õ–ö–ò
        print(f"\nüìã –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –°–õ–û–í–ê–†–ò–ö –°–°–´–õ–û–ö:")
        for brand, link in brand_links.items():
            print(f"   {brand}: {link}")
        
        # –¢–ï–ü–ï–†–¨ –û–ë–ù–û–í–õ–Ø–ï–ú –ì–õ–ê–í–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –° –ì–ò–ü–ï–†–°–°–´–õ–ö–ê–ú–ò
        if FORUM_CHAT_ID and brand_links and main_message_id:
            await update_main_message_with_links(main_message_id, brand_links)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

def format_brand_message(brand_name, items, total_sum):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—Ä–µ–Ω–¥–∞"""
    
    # –ñ–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—Ä–µ–Ω–¥–∞
    message = f"**üî• {brand_name}**\n\n"
    
    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç)
    for item_name, quantity in items.items():
        message += f"{item_name} {quantity}\n"
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    message += f"\n**üì¶ –í—Å–µ–≥–æ: {total_sum}**"
    
    return message



def format_brand_message_with_links(brand_name, whole_packs, loose_packs):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—Ä–µ–Ω–¥–∞ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤"""
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞–º–∏ –ø–æ –±–æ–∫–∞–º –∏ –∂–∏—Ä–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±—Ä–µ–Ω–¥–∞ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
    message = f"‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è**{brand_name.upper()}**‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è\n\n"
    
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º —Ü–µ–ª—ã–µ –±–∞–Ω–æ—á–∫–∏
    for flavor in whole_packs:
        name = flavor.get("name", "")
        quantity = flavor.get("quantity", 0)
        link = flavor.get("link")
        
        if link:
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É
            message += f"[{name}]({link}) {quantity}\n"
        else:
            # –ë–µ–∑ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏, –æ–±—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            message += f"{name} {quantity}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –≤—Å–∫—Ä—ã—Ç—ã–µ –≤–∫—É—Å—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    if loose_packs:
        message += "\n---\n**–í—Å–∫—Ä—ã—Ç—ã–µ –≤–∫—É—Å—ã:**\n"
        
        for flavor in loose_packs:
            name = flavor.get("name", "")
            quantity = flavor.get("quantity", 0)
            link = flavor.get("link")
            
            if link:
                # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥—Ä–∞–º–º
                message += f"[{name}]({link}) {quantity}–≥\n"
            else:
                # –ë–µ–∑ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏, –æ–±—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥—Ä–∞–º–º
                message += f"{name} {quantity}–≥\n"
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ –ø–∞—á–∫–∏)
    total_sum = sum(flavor.get("quantity", 0) for flavor in whole_packs)
    message += f"\n**üì¶ –í—Å–µ–≥–æ: {total_sum}**"
    
    return message

def find_flavor_link(brand_name, flavor_name, flavor_descriptions):
    """–ò—â–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫—É—Å–∞"""
    if brand_name in flavor_descriptions:
        brand_flavors = flavor_descriptions[brand_name]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if flavor_name in brand_flavors:
            return brand_flavors[flavor_name]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (—É–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º –ø–æ—Ö–æ–∂–∏—Ö —Å–ª–æ–≤)
        for desc_flavor_name, link in brand_flavors.items():
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            flavor_words = set(flavor_name.lower().split())
            desc_words = set(desc_flavor_name.lower().split())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞ (–¥–ª—è –æ–ø–µ—á–∞—Ç–æ–∫ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π)
            similar_words = 0
            for f_word in flavor_words:
                for d_word in desc_words:
                    if f_word == d_word:
                        similar_words += 1
            
            # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∏—Å–∫–∞:
            # 1. –ú–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Ç–æ—á–Ω–æ –ò–õ–ò –ø–æ—Ö–æ–∂–µ
            # 2. –ò–õ–ò 1 —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ—á–Ω–æ –ò–õ–ò –ø–æ—Ö–æ–∂–µ + –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if similar_words >= 2 or (similar_words >= 1 and len(flavor_words) <= 2):
                return link
            
    return None

def format_item_line(item_name, quantity):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º"""
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è Telegram)
    max_length = 25
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å—Ç—Ä–æ–∫—É
    qty_str = str(quantity)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ
    name_max_length = max_length - len(qty_str)
    
    # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(item_name) > name_max_length:
        item_name = item_name[:name_max_length-3] + "..."
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    dots_count = max_length - len(item_name) - len(qty_str)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º (—á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª-—Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–∫–∞)
    filler = ""
    for i in range(max(1, dots_count)):
        if i % 2 == 0:
            filler += " "
        else:
            filler += "¬∑"
    
    return f"{item_name}{filler}{qty_str}"

async def clear_forum_except_oldest():
    """–û—á–∏—â–∞–µ—Ç —Ñ–æ—Ä—É–º, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # API –∫–ª—é—á–∏ –¥–ª—è Telethon (—Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç)
    client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
    
    await client.start()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        entity = await client.get_entity(FORUM_CHAT_ID)
        print(f"üîç –û—á–∏—â–∞—é —Ñ–æ—Ä—É–º: {entity.title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–µ—Ç–∫–µ
        messages = []
        async for message in client.iter_messages(entity, reply_to=FORUM_THREAD_ID, limit=None):
            messages.append(message)
        
        # –ü–û–ö–ê–ó–´–í–ê–ï–ú –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        print(f"üìã –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø –í –§–û–†–£–ú–ï ({len(messages)} —à—Ç.):")
        for i, message in enumerate(messages):
            text_preview = message.text[:50] if message.text else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
            print(f"   {i}: ID {message.id} | –î–∞—Ç–∞: {message.date} | –¢–µ–∫—Å—Ç: {text_preview}...")
        
        if len(messages) <= 1:
            print("‚úÖ –í —Ñ–æ—Ä—É–º–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ç–µ–∫—Å—Ç–æ–º, —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ)
        main_messages = [m for m in messages if m.text and len(m.text) > 10]
        if not main_messages:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º!")
            return
        
        main_message = min(main_messages, key=lambda m: m.date)
        print(f"üìå –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ID {main_message.id} | –î–∞—Ç–∞: {main_message.date}")
        print(f"üìå –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–≥–æ
        deleted_count = 0
        for message in messages:
            if message.id == main_message.id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message.id}")
                continue
            
            try:
                await client.delete_messages(entity, message.id)
                deleted_count += 1
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message.id}")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message.id}: {e}")
        
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        return main_message.id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä—É–º–∞: {e}")
        return None
    
    finally:
        await client.disconnect()

async def update_assortment(update, context):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º (–ø–æ—Å–ª–µ –æ—Ç–≥—Ä—É–∑–∫–∏)"""
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω)
        assortment_file = "requestsMC/data/shisha/FinalAssortment.json"
        try:
            with open(assortment_file, "r", encoding="utf-8") as f:
                assortment_data = json.load(f)
            print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω –°–í–ï–ñ–ò–ô –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç: {len(assortment_data)} –±—Ä–µ–Ω–¥–æ–≤")
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤ —Å —Å—Å—ã–ª–∫–∞–º–∏
        flavor_descriptions_file = "requestsMC/data/shisha/FlavorDescriptions.json"
        flavor_descriptions = {}
        try:
            with open(flavor_descriptions_file, "r", encoding="utf-8") as f:
                flavor_descriptions = json.load(f)
            print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤: {len(flavor_descriptions)} –±—Ä–µ–Ω–¥–æ–≤")
        except FileNotFoundError:
            print("‚ö†Ô∏è –§–∞–π–ª –æ–ø–∏—Å–∞–Ω–∏–π –≤–∫—É—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥
        client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
        await client.start()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity –¥–ª—è —Ñ–æ—Ä—É–º–∞
            entity = await client.get_entity(FORUM_CHAT_ID)
            print(f"üîç –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Ñ–æ—Ä—É–º—É: {entity.title}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä—É–º–µ
            messages = []
            async for message in client.iter_messages(entity, reply_to=FORUM_THREAD_ID, limit=None):
                if message.text:  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
                    messages.append(message)
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä—É–º–µ")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            messages.sort(key=lambda x: x.date)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–ª–∞–≤–Ω–æ–µ) - –æ–Ω–æ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
            brand_messages = messages[1:]  # –°–æ–æ–±—â–µ–Ω–∏—è —Å –±—Ä–µ–Ω–¥–∞–º–∏
            
            print(f"üìù –ë—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å {len(brand_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±—Ä–µ–Ω–¥–∞–º–∏")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±—Ä–µ–Ω–¥–æ–º
            for i, (brand_name, brand_data) in enumerate(assortment_data.items()):
                if i >= len(brand_messages):
                    print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—Ä–µ–Ω–¥–∞ {i+1}")
                    break
                whole_packs = brand_data.get("whole_packs", [])
                loose_packs = brand_data.get("loose_packs", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if whole_packs or loose_packs:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—Ä–µ–Ω–¥–∞ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏
                    new_message = format_brand_message_with_links(brand_name, whole_packs, loose_packs)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    message_to_update = brand_messages[i]
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    whole_packs_count = len(whole_packs)
                    loose_packs_count = len(loose_packs)
                    
                    print(f"üìù –î–ï–¢–ê–õ–ò –ò–ó–ú–ï–ù–ï–ù–ò–ô –¥–ª—è {brand_name}:")
                    print(f"   –¶–µ–ª—ã–µ –ø–∞—á–∫–∏: {whole_packs_count} —Ç–æ–≤–∞—Ä–æ–≤")
                    print(f"   –ù–∞—Ä–∞–∑–≤–µ—Å: {loose_packs_count} —Ç–æ–≤–∞—Ä–æ–≤")
                    
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await client.edit_message(
                            entity=entity,
                            message=message_to_update,
                            text=new_message,
                            parse_mode='Markdown',
                            link_preview=False
                        )
                        
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {brand_name} ({whole_packs_count + loose_packs_count} —Ç–æ–≤–∞—Ä–æ–≤)")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                        try:
                            await update.effective_chat.send_message(f"‚úÖ –û–±–Ω–æ–≤–∏–ª –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç {brand_name}")
                        except Exception as chat_error:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç: {chat_error}")
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (–∏–∑–±–µ–≥–∞–µ–º –ª–∏–º–∏—Ç —Ñ–ª—É–¥–∞ Telegram)
                        await asyncio.sleep(5)
                        
                    except Exception as e:
                        error_msg = str(e)
                        if "Content of the message was not modified" in error_msg:
                            print(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {brand_name} - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {e}")
            
            print("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
        finally:
            await client.disconnect()
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {e}")

async def send_to_forum_via_telethon(message, chat_id, thread_id=None, parse_mode='Markdown', brand_name=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä—É–º —á–µ—Ä–µ–∑ Telethon"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
    
    await client.start()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º entity –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
        entity = await client.get_entity(chat_id)
        chat_id_numeric = entity.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –±—Ä–µ–Ω–¥–∞
        image_path = None
        if brand_name and brand_name in BRAND_IMAGES:
            image_path = f"{IMAGES_DIR}{BRAND_IMAGES[brand_name]}"
            import os
            if not os.path.exists(image_path):
                image_path = None  # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä—É–º
        if thread_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ç–∫—É
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è - –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            sent_message = await client.send_message(
                entity=chat_id,
                message=message,
                reply_to=thread_id,
                parse_mode=parse_mode,
                link_preview=False
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç –±–µ–∑ —Ñ–æ—Ç–æ
            sent_message = await client.send_message(
                entity=chat_id,
                message=message,
                parse_mode=parse_mode,
                link_preview=False
            )
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_link = f"https://t.me/c/{chat_id_numeric}/{sent_message.id}"
        print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_link}")
        
        return sent_message, message_link
        
    finally:
        await client.disconnect()

async def update_main_message_with_links(main_message_id, brand_links):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –±—Ä–µ–Ω–¥–æ–≤"""
    # API –∫–ª—é—á–∏ –¥–ª—è Telethon (—Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç)
    client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
    
    await client.start()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
        entity = await client.get_entity(FORUM_CHAT_ID)
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        main_message = await client.get_messages(entity, ids=main_message_id)
        if not main_message:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {main_message_id}")
            return
        
        current_text = main_message.text
        print(f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {current_text[:100]}...")
        
        # –°–ù–ê–ß–ê–õ–ê –£–î–ê–õ–Ø–ï–ú –í–°–ï –°–¢–ê–†–´–ï –ì–ò–ü–ï–†–°–°–´–õ–ö–ò
        import re
        updated_text = current_text
        
        # –°–ù–ê–ß–ê–õ–ê —É–¥–∞–ª—è–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **
        updated_text = re.sub(r'\*\*', '', updated_text)
        print("üßπ –£–¥–∞–ª–µ–Ω –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **")
        
        # –ü–û–¢–û–ú —É–¥–∞–ª—è–µ–º –≤—Å–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)
        updated_text = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', updated_text)
        print("üßπ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏")
        
        # –¢–ï–ü–ï–†–¨ –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–´–ï –ì–ò–ü–ï–†–°–°–´–õ–ö–ò
        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø–æ—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ!
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–æ—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ –∫ –∫–æ—Ä–æ—Ç–∫–æ–º—É)
        sorted_brands = sorted(brand_links.items(), key=lambda x: len(x[0]), reverse=True)
        
        for brand_name, link in sorted_brands:
            # –°–æ–∑–¥–∞–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
            hyperlink = f"[{brand_name}]({link})"
            
            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
            search_pattern = brand_name
            replace_pattern = hyperlink
            
            # –ó–∞–º–µ–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
            if search_pattern in updated_text:
                updated_text = updated_text.replace(search_pattern, replace_pattern)
                print(f"üîó –ó–∞–º–µ–Ω–µ–Ω–æ '{search_pattern}' –Ω–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É")
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ '{search_pattern}' –≤ —Ç–µ–∫—Å—Ç–µ")
        
        # –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        if not updated_text.startswith('**'):
            updated_text = '**' + updated_text
        if not updated_text.endswith('**'):
            updated_text = updated_text + '**'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await client.edit_message(entity, main_message_id, updated_text, parse_mode='Markdown')
        print(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    finally:
        await client.disconnect()
