from datetime import datetime
import requests
from telegram import Update
from configMC import headers

async def create_demand_for_order(order_href, update, context, overheads):
    url = "https://api.moysklad.ru/api/remap/1.2/entity/demand"

    order = context.user_data.get("last_order")
    if not order:
        await update.effective_chat.send_message("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.")
        return

    organization_href = order["organization"]["meta"]["href"]
    agent_href = order["agent"]["meta"]["href"]
    store_href = order["store"]["meta"]["href"]
    
    positions_url = order["positions"]["meta"]["href"]
    response = requests.get(positions_url, headers=headers)
    rows = response.json()["rows"]

    demand_positions = []
    for item in rows:
        demand_positions.append({
            "assortment": item["assortment"],
            "quantity": item["quantity"],
            "price": item["price"]
        })
        
    data = {
        #"moment": datetime.now().astimezone().isoformat(timespec="seconds"),
        "organization": {
            "meta": {
                "href": organization_href,
                "type": "organization",
                "mediaType": "application/json"
            }
        },
        "agent": {
            "meta": {
                "href": agent_href,
                "type": "counterparty",
                "mediaType": "application/json"
            }
        },
        "store": {
            "meta": {
                "href": store_href,
                "type": "store",
                "mediaType": "application/json"
            }
        },
        "positions": demand_positions,
        "customerOrder": {
            "meta": {
                "href": order_href,
                "type": "customerorder",
                "mediaType": "application/json"
            }
        },
        "description": "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö" if overheads > 0 else "üí∞ –î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"
    }

    if overheads > 0:
        data["overhead"] = {
            "sum": int(overheads)*100000,
            "distribution": "price"
        }

    response = requests.post(url, headers=headers, json=data)
    #import json
    #print(json.dumps(response.json(), indent=4, ensure_ascii=False))
    

    if response.status_code == 200:
        await update.effective_chat.send_message("üì¶ –û—Ç–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ú–æ–π –°–∫–ª–∞–¥
            from requestsMC.prepare_assortment import prepareAssortment
            await prepareAssortment()
            
            # –ü–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä—É–º–µ
            from requestsMC.publish_assortment import update_assortment
            await update_assortment(update, context)
            print("‚úÖ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–≥—Ä—É–∑–∫–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {e}")
        
        return response
    else:
        
        await update.effective_chat.send_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É: {response.text}")
        return response