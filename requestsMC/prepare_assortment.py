import requests
import json
import os
from configMC import headers, IvanActual_href, DATA_DIR, ACTUAL_BRANDS

def get_stock_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞"""
    try:
        print("üîÑ –ü–æ–ª—É—á–∞—é –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞...")
        
        # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º
        url = "https://api.moysklad.ru/api/remap/1.2/report/stock/bystore"
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞—à–µ–º—É —Å–∫–ª–∞–¥—É
        params = {
            "filter": f"store={IvanActual_href}"
        }
        
        print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É: {IvanActual_href}")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.get(url, headers=headers, params=params)
        
        if response.status_code == 200:
            data = response.json()
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {data['meta']['size']} —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
            stock_file = f"{DATA_DIR}StockData.json"
            with open(stock_file, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –û—Å—Ç–∞—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {stock_file}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return data
            
        else:
            error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code}"
            print(f"‚ùå {error_msg}")
            return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        return None

async def prepareAssortment():
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç - —Ç—è–Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç FinalAssortment"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞
        stock_data = get_stock_data()
        
        if not stock_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")
            return None
        
        print("‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Üí href
        name_href_file = f"{DATA_DIR}ItemNameHref.json"
        with open(name_href_file, "r", encoding="utf-8") as f:
            name_to_href = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å href ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ
        href_to_name = {href: name for name, href in name_to_href.items()}
        
        print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(href_to_name)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤
        flavor_descriptions_file = f"{DATA_DIR}FlavorDescriptions.json"
        flavor_descriptions = {}
        try:
            with open(flavor_descriptions_file, "r", encoding="utf-8") as f:
                flavor_descriptions = json.load(f)
            print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–π –≤–∫—É—Å–æ–≤ –¥–ª—è {len(flavor_descriptions)} –±—Ä–µ–Ω–¥–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –≤–∫—É—Å–æ–≤: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å
        final_assortment = {}
        
        # –ò–¥–µ–º –ø–æ –º–∞—Å—Å–∏–≤—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
        for brand in ACTUAL_BRANDS:
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±—Ä–µ–Ω–¥: {brand}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –±—Ä–µ–Ω–¥–∞
            brand_data = {
                "whole_packs": [],
                "loose_packs": []
            }
            
            # –ò–¥–µ–º –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º —Å–æ —Å–∫–ª–∞–¥–∞
            if "rows" in stock_data:
                for item in stock_data["rows"]:
                    # –ü–æ–ª—É—á–∞–µ–º href —Ç–æ–≤–∞—Ä–∞
                    item_href = get_item_href(item)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    available = get_available_quantity(item)
                    
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ > 0
                    if item_href in href_to_name and available > 0:
                        item_name = href_to_name[item_href]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç–æ–≤–∞—Ä —ç—Ç–æ–º—É –±—Ä–µ–Ω–¥—É
                        if is_item_belongs_to_brand(item_name, brand):
                            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –±—Ä–µ–Ω–¥–∞ –∏ –≤–µ—Å–∞
                            clean_name = clean_item_name(item_name, brand)
                            
                            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫—É—Å–∞
                            flavor_link = find_flavor_link(brand, clean_name, flavor_descriptions)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –Ω–∞ "1–≥"
                            if item_name.endswith("1–≥") or item_name.endswith("(1–≥)"):
                                # –ù–∞—Ä–∞–∑–≤–µ—Å - –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 25
                                rounded_quantity = round_to_nearest_25(available)
                                if rounded_quantity >= 25:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ >= 25–≥
                                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∫—É—Å–∞ –¥–ª—è loose_packs
                                    flavor_data = {
                                        "name": clean_name,
                                        "quantity": rounded_quantity,
                                        "link": flavor_link
                                    }
                                    brand_data["loose_packs"].append(flavor_data)
                                    link_info = f" (—Å—Å—ã–ª–∫–∞: {flavor_link})" if flavor_link else " (–±–µ–∑ —Å—Å—ã–ª–∫–∏)"
                                    print(f"  üì¶ –ù–∞—Ä–∞–∑–≤–µ—Å: {clean_name} - {available}–≥ ‚Üí {rounded_quantity}–≥{link_info}")
                                else:
                                    print(f"  üì¶ –ù–∞—Ä–∞–∑–≤–µ—Å: {clean_name} - {available}–≥ ‚Üí –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (< 25–≥)")
                            else:
                                # –¶–µ–ª—ã–µ –ø–∞—á–∫–∏
                                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∫—É—Å–∞ –¥–ª—è whole_packs
                                flavor_data = {
                                    "name": clean_name,
                                    "quantity": available,
                                    "link": flavor_link
                                }
                                brand_data["whole_packs"].append(flavor_data)
                                link_info = f" (—Å—Å—ã–ª–∫–∞: {flavor_link})" if flavor_link else " (–±–µ–∑ —Å—Å—ã–ª–∫–∏)"
                                print(f"  üì¶ –¶–µ–ª–∞—è –ø–∞—á–∫–∞: {clean_name} - {available}{link_info}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
            if brand_data["whole_packs"] or brand_data["loose_packs"]:
                final_assortment[brand] = brand_data
                whole_count = len(brand_data["whole_packs"])
                loose_count = len(brand_data["loose_packs"])
                print(f"‚úÖ –ë—Ä–µ–Ω–¥ {brand}: {whole_count} —Ü–µ–ª—ã—Ö –ø–∞—á–µ–∫, {loose_count} –Ω–∞—Ä–∞–∑–≤–µ—Å")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
        final_file = f"{DATA_DIR}FinalAssortment.json"
        with open(final_file, "w", encoding="utf-8") as f:
            json.dump(final_assortment, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {final_file}")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: {len(final_assortment)}")
        
        return final_assortment
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞: {e}")
        return None

def get_available_quantity(item):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ—Å—Ç–∞—Ç–æ–∫ - —Ä–µ–∑–µ—Ä–≤)"""
    available = 0
    if "stockByStore" in item:
        for store_stock in item["stockByStore"]:
            stock = store_stock.get("stock", 0)
            reserve = store_stock.get("reserve", 0)
            available += (stock - reserve)
    return int(available)

def get_item_href(item):
    """–ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å—Ç—ã–π href —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    item_href = item.get("meta", {}).get("href", "")
    
    # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ href (–≤—Å—ë –ø–æ—Å–ª–µ ?)
    if "?" in item_href:
        item_href = item_href.split("?")[0]
    
    return item_href

def is_item_belongs_to_brand(item_name, brand):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç–æ–≤–∞—Ä —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±—Ä–µ–Ω–¥—É"""
    item_lower = item_name.lower()
    brand_lower = brand.lower()
    
    # –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–õ–£–ß–ê–ò - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
    if brand == "Darkside Xperience":
        # –î–ª—è Xperience –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å "xperience" –∏–ª–∏ "darkside xperience"
        return "xperience" in item_lower or "darkside xperience" in item_lower
    elif brand == "Darkside":
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ Darkside –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å "xperience"
        if "xperience" in item_lower:
            return False
        return "darkside" in item_lower
    elif brand == "DS shot":
        # –î–ª—è DS shot –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å "ds shot"
        return "ds shot" in item_lower
    elif brand == "Blackburn":
        # –î–ª—è Blackburn –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å "blackburn"
        return "blackburn" in item_lower
    elif brand == "Overdose":
        # –î–ª—è Overdose –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å "overdose", –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º "blackburn ovd"
        if "blackburn" in item_lower:
            return False
        return "overdose" in item_lower
    
    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
    brand_variants = [
        brand_lower,
        brand_lower.replace(" ", ""),
        brand_lower.replace(" ", "_"),
        brand_lower.replace(" ", "-")
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ª—é–±–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±—Ä–µ–Ω–¥–∞
    return any(variant in item_lower for variant in brand_variants)

def clean_item_name(item_name, brand):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –±—Ä–µ–Ω–¥–∞ –∏ –≤–µ—Å–∞"""
    import re
    clean_name = item_name
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è DS Shot
    if brand == "DS shot":
        # –£–±–∏—Ä–∞–µ–º "DS Shot" –∏–∑ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        clean_name = re.sub(r'^DS\s+Shot\s+', '', clean_name, flags=re.IGNORECASE)
    elif brand == "Xperience":
        # –£–±–∏—Ä–∞–µ–º "Darkside Xperience" –∏–∑ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        clean_name = re.sub(r'^Darkside\s+Xperience\s+', '', clean_name, flags=re.IGNORECASE)
    else:
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤
        brand_variants = [brand, brand.replace(" ", ""), brand.replace(" ", "_")]
        for variant in brand_variants:
            if variant.lower() in clean_name.lower():
                clean_name = clean_name.replace(variant, "").strip()
                break
    
    # –£–±–∏—Ä–∞–µ–º –≤–µ—Å –≤ —Å–∫–æ–±–∫–∞—Ö
    clean_name = re.sub(r'\s*\(\d+–≥\)', '', clean_name)
    clean_name = re.sub(r'\s*\d+–≥', '', clean_name)
    clean_name = re.sub(r'\s*\(1–≥\)', '', clean_name)
    clean_name = re.sub(r'\s*1–≥', '', clean_name)
    
    return clean_name.strip()

def round_to_nearest_25(quantity):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 25 (–≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É)"""
    if quantity < 25:
        return 0
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 25
    return (quantity // 25) * 25

def find_flavor_link(brand_name, flavor_name, flavor_descriptions):
    """–ò—â–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫—É—Å–∞ - –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –í –ù–ò–ñ–ù–ï–ú –†–ï–ì–ò–°–¢–†–ï"""
    if brand_name in flavor_descriptions:
        brand_flavors = flavor_descriptions[brand_name]
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        flavor_name_lower = flavor_name.lower()
        for desc_flavor_name, link in brand_flavors.items():
            if desc_flavor_name.lower() == flavor_name_lower:
                return link
                
    return None
